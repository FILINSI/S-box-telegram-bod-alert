import telebot
from telebot import types
import logging
from server import Server
from parcer import Parcer

TOKEN = 'Token'

bot = telebot.TeleBot(TOKEN)
# –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger = logging.getLogger('logger')
logger.setLevel(logging.INFO)  # DEBUG, INFO, WARNING, ERROR, CRITICAL
logging.basicConfig(filename='bot.log', level=logging.INFO)
logger.setLevel(logging.DEBUG)

# –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
server = Server('bot.db')

# –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@bot.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
	if(not server.subscriber_exists(message.from_user.id)):
		# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		server.add_subscriber(message.from_user.id)
	else:
		# –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
		server.update_subscription(message.from_user.id, True)
	
	await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! ")

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏
@bot.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: types.Message):
	if(not server.subscriber_exists(message.from_user.id)):
		# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º)
		server.add_subscriber(message.from_user.id, False)
		await message.answer("–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
	else:
		# –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
		server.update_subscription(message.from_user.id, False)
		await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")


#  –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–∏ START
@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üá∫üá∏ English')
    btn2 = types.KeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π')
    markup.add(btn1, btn2,)
    bot.send_message(
        message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫\Select a language ', reply_markup=markup)
# –°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
# –†—É—Å—Å–∫–∏–π


@bot.message_handler(content_types=['text'])
def start_categorial(message):
    if message.text == 'üá∑üá∫ –†—É—Å—Å–∫–∏–π':
        markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        btn1 = types.KeyboardButton('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞üîß')
        btn2 = types.KeyboardButton('–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞–∑–¥–∞—á–∞ –∫–ª—é—á–µ–π üîë')
        btn3 = types.KeyboardButton('–ê–≤—Ç–æ—Ä üìï')
        btn4 = types.KeyboardButton('–ù–∞–∑–∞–¥/Escape ‚û°Ô∏è')
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(
            message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å. –í—Å–µ, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å, —ç—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö —Å–∞–π—Ç–∞ –∏ —Ä–∞–∑–¥–∞—á–µ –∫–ª—é—á–µ–π S&box', reply_markup=markup)
    elif message.text == '–ê–≤—Ç–æ—Ä üìï':
        bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä –±–æ—Ç–∞  - @FilinSi')
        bot.send_message(message.chat.id, '–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ - 0.3')
        bot.send_message(
            message.chat.id, 'ETH/BTC/BNB/BUSD - 0xbfe5A7fe19B93f538400BC60741B46d13D50CbC6')
        bot.send_message(message.chat.id, '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!')
    elif message.text == '–ù–∞–∑–∞–¥/Escape ‚û°Ô∏è':
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        btn1 = types.KeyboardButton('üá∫üá∏ English')
        btn2 = types.KeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π')
        btn3 = types.KeyboardButton('–ù–∞–∑–∞–¥/Escape ‚û°Ô∏è')
        markup.add(btn1, btn2, btn3)
        bot.send_message(
            message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫\Select a language ', reply_markup=markup)
    elif message.text == '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–π—Ç–∞üîß':
        bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüòã')
    elif message.text == '–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞–∑–¥–∞—á–∞ –∫–ª—é—á–µ–π üîë':
        bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüòã')
# Script after language selection
# Russian
    elif message.text == 'üá∫üá∏ English':
        markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        btn1 = types.KeyboardButton('Last web update üîß')
        btn2 = types.KeyboardButton('Last giveaway üîë')
        btn3 = types.KeyboardButton('Author üìï')
        btn4 = types.KeyboardButton('–ù–∞–∑–∞–¥/Escape ‚û°Ô∏è')
        markup.add(btn1, btn2, btn3, btn4)
        bot.send_message(
            message.chat.id, 'Hi, Im a bot, dont try to talk to me. All I can do is inform you about site updates and S&box key giveaways', reply_markup=markup)

    elif message.text == 'Author üìï':
        bot.send_message(message.chat.id, 'Bot author  - @FilinSi')
        bot.send_message(message.chat.id, 'Bot version - 0.3')
        bot.send_message(
            message.chat.id, 'ETH/BTC/BNB/BUSD - 0xbfe5A7fe19B93f538400BC60741B46d13D50CbC6')
        bot.send_message(message.chat.id, 'Enjoy your use!')
    elif message.text == '–ù–∞–∑–∞–¥/Escape ‚û°Ô∏è':
        bot.send_message(message.chat.id, '/start')
    elif message.text == 'Last web update üîß':
        bot.send_message(
            message.chat.id, 'in the worksüòã')
    elif message.text == 'Last giveaway üîë':
        bot.send_message(message.chat.id, 'in the worksüòã')
    else:
        bot.send_message(message.chat.id, 'i dont understand you')
    


bot.polling(none_stop=True)
